import openpyxl
import random
import math
import operator
basedatos=openpyxl.load_workbook(r'C:\Users\aleco\OneDrive\Escritorio\Alg Genet\TablaCapitales.xlsx')
sheet=basedatos.get_sheet_by_name('Sheet1')

#Encuentra el indice de la ciudad en el docuemento Excel
def buscaIndice(ciudad):
	i=0
	for x in range(25):
		if(sheet.cell(row=x+2,column=1).value == ciudad):
			i=x+2
			break
	return (i)

def encuentaraRecorrido(recorrido,indice):
	kms=0
	for t in range(23):
		mini=1000000
		for x in range(24):
			if( (int(sheet.cell(row=indice,column=x+2).value)!=0 ) and (int(sheet.cell(row=indice,column=x+2).value)<mini) and ((sheet.cell(row=1,column=x+2).value) not in recorrido)):
				mini=int(sheet.cell(row=indice,column=x+2).value)
				ciudadAseguir=sheet.cell(row=1,column=x+2).value
	
		recorrido.append(ciudadAseguir)
		indice = buscaIndice(ciudadAseguir)
		kms=kms+mini

	return (kms)

def cambiaAnombres(recorrido):
	nombres=[]
	for x in range(24):
		nombres.append(sheet.cell(row=1,column=recorrido[x]+1).value)
	return nombres



#Función que agrega cada coromosoma creado aleatoriamente a una lista que va a ser la población inicial
def arreglo(n, m):
	p=[]
	for x in range(n):
		coromosoma = []
		while(len(coromosoma)!=24):
			nroAlt=random.randint(1, 24)
			if(nroAlt not in coromosoma):
				coromosoma.append(nroAlt)
		p.append(coromosoma)	
	return p

#Función que calcula los valores de la funcion objetivo
def funcionObjetivo(p, n):
	valores=[]
	for x in range(n):
		kmTotal = 0
		for y in range(23):
			kmTotal += int(sheet.cell(row=(p[x][y])+1,column=(p[x][y+1])+1).value)

		#Agrega la distancia de la ultima ciudad hasta la primera		
		kmTotal=kmTotal+ int(sheet.cell(row=(p[x][0]+1),column=(p[x][23]+1)).value)
		valores.append(kmTotal)

		


	return (valores)


#Función donde se genera una lista con los valores fitness de una población
def fitness(funcObj,n):
	valoresfit = []
	sum = 0
	for i in range(n):
		sum += funcObj[i]
	for i in range(n):
		valoresfit.append(math.ceil (funcObj[i]*100/sum))
	return valoresfit

#Compara los valores de la funcion objetivo aplicada a ambos cormosomas, selecciona el de mayor valor y devuelve el cromosoma correspondiente a ese valor mas grande
def seleccionTorneo(elegidos):
	global poblacion
	global funObj
	valoresFuncObj=dict()
	for i in range(2):
		pos=poblacion.index(elegidos[i])
		valoresFuncObj[pos]=funObj[pos]
	min_key = min(valoresFuncObj.items(), key=operator.itemgetter(1))[0]
	return poblacion[min_key]

#Función que pasa de un diccionario a una lista
def pasaje(hijo):
	lista=[]
	for i in range(24):
		lista.append(hijo.get(i))
	return lista

def mutacion(pM,hijo):
	aux = hijo[pM]
	hijo[pM] = hijo[pM+1]
	hijo[pM+1] = aux
	return hijo

def padres(padre1, padre2):
	hijosCross=[]
	nroCross=random.random()
	if(nroCross<0.75):
		hijo1=dict()
		hijo2=dict()
		hijo1[0] = padre1[0]
		band = True
		x = 0
		while(band):
			for y in range(24):
				if(padre2[x] == padre1[y]):
					if(hijo1[0] == padre1[y]):
						band = False
						break
					hijo1[y] = padre2[x]
					x = y
					break
		for i in range(24):
			if(i not in hijo1):
				hijo1[i] = padre2[i]
				hijo2[i] = padre1[i]
		for i in range(24):
			if(i not in hijo2):
				hijo2[i] = padre2[i]
		hijosCross.append(pasaje(hijo1))
		hijosCross.append(pasaje(hijo2))
	else:
		hijosCross.append(padre1)
		hijosCross.append(padre2)
	for i in range(2):
		nroMut=random.random()
		if(nroMut<0.3):
			posMutacion=random.randint(0,22)
			hijosCross[i] = mutacion(posMutacion,hijosCross[i])
	return(hijosCross)














def opcionUno():
	recorrido=[]
	ciudad=input("Ingrese ciudad de partida: ")
	recorrido.append(ciudad)
	indice=buscaIndice(ciudad)
	kilometros=encuentaraRecorrido(recorrido,indice)
	indiceUltCiud=buscaIndice(recorrido[-1])
	kilometros=kilometros+ int(sheet.cell(row=indice,column=indiceUltCiud).value)
	#Agrega primera ciudad de todas
	recorrido.append(ciudad)
	print("Recorrido mínimo partiendo desde "+ciudad+": ",recorrido)
	print("Kilometros finales:" + str(kilometros))


def opcionDos():
	kmMin=100000000
	recorridoMin=[]
	for x in range(24):
		recorrido=[] 
		recorrido.append(sheet.cell(row=x+2,column=1).value)
		indice=x+2
		kilometros=encuentaraRecorrido(recorrido,indice)
		indiceUltCiud=buscaIndice(recorrido[-1])
		kilometros=kilometros+ int(sheet.cell(row=indice,column=indiceUltCiud).value)
		#Agrega primera ciudad de todas
		recorrido.append(sheet.cell(row=x+2,column=1).value)
		#print(recorrido)
		if(kilometros<kmMin):
			kmMin=kilometros
			recorridoMin=recorrido

	print("Recorrido mínimo: ", recorridoMin)
	print("Kilometros finales:" + str(kmMin))

def opcionTres():
	nroIteraciones=200
	#Creo la lista con la población inicial
	n = 50
	global poblacion 
	poblacion = arreglo(n, 24)
	global funObj
	

	for i in range(nroIteraciones):
		funObj = funcionObjetivo(poblacion, n)
		funFit = fitness(funObj, n)
	
		elegidos=[]
		padresElegidos=[]
		nuevaPoblacion=[]
	
		#Genero una lista con los padres elegidos a traves del método de Torneo
		for t in range(n):
			for k in range(2):
				elegidos.append(random.choice(poblacion))
			padresElegidos.append(seleccionTorneo(elegidos))
			elegidos=[]
	
		rango = int(n/2)
	
		for i in range(rango):
			nuevaPoblacion.extend(padres(padresElegidos[(2*i)],padresElegidos[1+(2*i)]))
	
		poblacion = nuevaPoblacion
	

	print()
	menor=min(funObj)
	menorPos=funObj.index(menor)
	print("Mejor recorrido: ")
	recorrido=cambiaAnombres(poblacion[menorPos])
	recorrido.append(sheet.cell(row=poblacion[menorPos][0]+1,column=1).value)
	print(recorrido)
	print("Kilometros finales: ")
	print(menor)
	
def opcionCuatro():
	nroIteraciones=200
	#Creo la lista con la población inicial
	n = 50
	global poblacion 
	poblacion = arreglo(n, 24)
	global funObj
	

	for i in range(nroIteraciones):
		funObj = funcionObjetivo(poblacion, n)
		funFit = fitness(funObj, n)
		funObjOrdenada=sorted(funObj)
		
		#Agrego directamente a al nueva población los dos cormosomas que poseen el mejor fitness(si poseen el mejor fitness, también poseen los valores mayores en la lista de los valores de la función objetivo)
		nuevaPoblacion=[]
		for x in range(10):
			nuevaPoblacion.append(poblacion[funObj.index(funObjOrdenada[x])])
	
		elegidos=[]
		padresElegidos=[]

	
		#Genero una lista con los padres elegidos a traves del método de Torneo
		for t in range(n-10):
			for k in range(2):
				elegidos.append(random.choice(poblacion))
			padresElegidos.append(seleccionTorneo(elegidos))
			elegidos=[]
	
		rango = int((n/2)-5)
	
		for i in range(rango):
			nuevaPoblacion.extend(padres(padresElegidos[(2*i)],padresElegidos[1+(2*i)]))
	
		poblacion = nuevaPoblacion
	

	print()
	menor=min(funObj)
	menorPos=funObj.index(menor)
	print("Mejor recorrido: ")
	recorrido=cambiaAnombres(poblacion[menorPos])
	recorrido.append(sheet.cell(row=poblacion[menorPos][0]+1,column=1).value)
	print(recorrido)
	print("Kilometros finales: ")
	print(menor)
	
	








def menu():
	print("")
	print("")
	print("MENU PRINCIPAL:")
	print("")
	print("1-Elegir ciudad")
	print("2-Todas las ciudades")
	print("3-A traves de algoritmo genetico")
	print("4-A traves de algoritmo genetico con Elitismo")
	print("0-Finalizar el programa")
	print("")
	op=int(input("Seleccione la opción deseada: "))
	return(op)



opcion=menu()
while(opcion!=0):
	if(opcion==1):
		opcionUno()
	elif(opcion==2):
		opcionDos()
	elif(opcion==3):
		opcionTres()
	elif(opcion==4):
		opcionCuatro()

	opcion=menu()

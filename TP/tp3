import openpyxl
import random
import math
import operator
basedatos=openpyxl.load_workbook(r'D:\Users\NACHO\Downloads\TablaCapitales.xlsx')
sheet=basedatos.get_sheet_by_name('Sheet1')

#Encuentra el indice de la ciudad en el docuemento Excel
def buscaIndice(ciudad):
	i=0
	for x in range(25):
		if(sheet.cell(row=x+2,column=1).value == ciudad):
			i=x+2
			break
	return (i)

def encuentaraRecorrido(recorrido,indice):
	kms=0
	for t in range(23):
		min=1000000
		for x in range(24):
			if( (int(sheet.cell(row=indice,column=x+2).value)!=0 ) and (int(sheet.cell(row=indice,column=x+2).value)<min) and ((sheet.cell(row=1,column=x+2).value) not in recorrido)):
				min=int(sheet.cell(row=indice,column=x+2).value)
				ciudadAseguir=sheet.cell(row=1,column=x+2).value
	
		recorrido.append(ciudadAseguir)
		indice = buscaindice(ciudadAseguir)
		kms=kms+min

	return (kms)	



#Función que agrega cada coromosoma creado aleatoriamente a una lista que va a ser la población inicial
def arreglo(n, m):
	p=[]
	for x in range(n):
		coromosoma = []
		while(len(coromosoma)!=24):
			nroAlt=random.randint(1, 24)
			if(nroAlt not in coromosoma):
				coromosoma.append(nroAlt)
		p.append(coromosoma)	
	return p

#Función que calcula los valores de la funcion objetivo
def funcionObjetivo(p, n):
	valores=[]
	for x in range(n):
		kmTotal = 0
		for y in range(23):
			kmTotal += int(sheet.cell(row=(p[x][y])+1,column=(p[x][y+1])+1).value)
		valores.append(kmTotal)
	return (valores)


#Función donde se genera una lista con los valores fitness de una población
def fitness(funcObj,n):
	valoresfit = []
	sum = 0
	for i in range(n):
		sum += funcObj[i]
	for i in range(n):
		valoresfit.append(math.ceil (funcObj[i]*100/sum))
	return valoresfit

#Compara los valores de la funcion objetivo aplicada a ambos cormosomas, selecciona el de mayor valor y devuelve el cromosoma correspondiente a ese valor mas grande
def seleccionTorneo(elegidos):
	global poblacion
	global funObj
	valoresFuncObj=dict()
	for i in range(2):
		pos=poblacion.index(elegidos[i])
		valoresFuncObj[pos]=funObj[pos]
	min_key = min(valoresFuncObj.items(), key=operator.itemgetter(1))[0]
	return poblacion[min_key]

def padres(padre1, padre2):
	hijosCross=[]
	#nroCross=random.random()
	nroCross=0.5
	if(nroCross<0.75):
		hijo1=dict()
		hijo2=dict()
		hijo1[0] = padre1[0]
		band = True
		x = 0
		while(band):
			for y in range(23):
				if(padre2[x] == padre1[y]):
					if(hijo1[0] == padre1[y]):
						band = False
						break
					hijo1[y] = padre2[x]
					x = y
					break
		for i in range(23):
			if(i not in hijo1):
				hijo1[i] = padre2[i]
				hijo2[i] = padre1[i]
		for i in range(23):
			if(i not in hijo2):
				hijo2[i] = padre2[i]
		print(hijo1)
		print(hijo2)
	return(hijosCross)

#padre1=[12,03,06,19,08,23,05,...]
#padre2=[19,15,02,23,01,05,12,...]

#hijo1 =[12,  ,  ,19,  ,23,05,  ,...]

#hijo1 =[12,15,02,19,01,23,05,...]
#hijo2 =[  ,03,06,  ,08,  ,  ,...]







def opcionUno():
	recorrido=[] 
	print("Ingrese ciudad de partida: ")
	ciudad=input()
	recorrido.append(ciudad)
	indice=buscaIndice(ciudad)
	kilometros=encuentaraRecorrido(recorrido,indice)
	indiceUltCiud=buscaIndice(recorrido[-1])
	print(sheet.cell(row=indice,column=indiceUltCiud).value)
	kilometros=kilometros+ int(sheet.cell(row=indice,column=indiceUltCiud).value)
	#Agrega primera ciudad de todas
	recorrido.append(ciudad)
	print(recorrido)
	print("kilometros finales:" + str(kilometros))


def opcionDos():
	kmMin=100000000
	recorridoMin=[]
	for x in range(24):
		recorrido=[] 
		recorrido.append(sheet.cell(row=x+2,column=1).value)
		indice=x+2
		kilometros=encuentaraRecorrido(recorrido,indice)
		indiceUltCiud=buscaIndice(recorrido[-1])
		kilometros=kilometros+ int(sheet.cell(row=indice,column=indiceUltCiud).value)
		#Agrega primera ciudad de todas
		recorrido.append(sheet.cell(row=x+2,column=1).value)
		#print(recorrido)
		print("kilometros finales:" + str(kilometros))
		if(kilometros<kmMin):
			kmMin=kilometros
			recorridoMin=recorrido

	print("Recorrido mínimo: ")
	print(recorridoMin)
	print("kilometros finales:" + str(kmMin))

def opcionTres():
	nroIteraciones=10
	#Creo la lista con la población inicial
	n = 4
	global poblacion 
	poblacion = arreglo(n, 24)
	global funObj
	funObj = funcionObjetivo(poblacion, n)
	funFit = fitness(funObj, n)
	

	elegidos=[]
	padresElegidos=[]
	nuevaPoblacion=[]

	#Genero una lista con los 10 padres elegidos a traves del método de Torneo
	for t in range(n):
		for k in range(2):
			elegidos.append(random.choice(poblacion))
		padresElegidos.append(seleccionTorneo(elegidos))
		elegidos=[]

	print(padresElegidos)

	for i in range(2):
		print("---------------------------")
		print(padresElegidos[(2*i)])
		print(padresElegidos[1+(2*i)])
		print("---------------------------")
		nuevaPoblacion.extend(padres(padresElegidos[(2*i)],padresElegidos[1+(2*i)]))
		print(nuevaPoblacion)

	
	
	
	
	
	































def menu():
	print("Seleccione la Opcion 1-Elegir ciudad  2-Todas las ciudades 3-A traves de algoritmo genetico 0-Salir del programa")
	op=int(input())
	return(op)



opcion=menu()
while(opcion!=0):
	if(opcion==1):
		opcionUno()
	elif(opcion==2):
		opcionDos()
	elif(opcion==3):
		opcionTres()

	opcion=menu()

import random
import math

def aleatorio(n):
	numero=""
	for i in range(n):
		a = str(random.randint(0,1))
		numero += a
	return (numero)

def arreglo(n, m):
	numeros = []
	for i in  range(n):
		numeros.append(aleatorio(m))
	return numeros

def pasaje(poblBinaria):
	poblacionEnteros=[]
	for i in range(10):
		poblacionEnteros.append(int(poblBinaria[i], 2))
	return poblacionEnteros

def funcionobjetivo(poblEntero):
	valoresfo = []
	for i in range(10):
		valoresfo.append((poblEntero[i]/(2**(30-1)))**2)
	return valoresfo

def fitness(funcObj):
	valoresfit = []
	sum = 0

	for i in range(10):
		sum += funcObj[i]

	for i in range(10):
		valoresfit.append(math.ceil (funcObj[i]*100/sum))

	return valoresfit

def crearuleta(funFit):
	ruleta = []
	for i in range(10):
		for u in range(funFit[i]):
			ruleta.append(i)

	return ruleta

def mutacion(posMutacion,pad1,pad2):
	padre1Lista=list(pad1)
	padre2Lista=list(pad2)
	print(padre1Lista)
	print(padre2Lista)
	
	if(padre1Lista[posMutacion]=='1'):
		padre1Lista[posMutacion]='0'
	else:
		padre1Lista[posMutacion]='1'

	if(padre2Lista[posMutacion]=='1'):
		padre2Lista[posMutacion]='0'
	else:
		padre2Lista[posMutacion]='1'

	padre1Lista="".join(map(str, padre1Lista))
	padre2Lista="".join(map(str, padre2Lista))


	print("Padres despues de posMutacion: ")
	print(padre1Lista)
	print(padre2Lista)

	return [padre1Lista,padre2Lista]





def crossover(nro,pad1,pad2):
	hijo1=[]
	hijo2=[]
	hijo1.append(pad1[:nro])
	hijo1.append(pad2[nro:])
	hijo2.append(pad2[:nro])
	hijo2.append(pad1[nro:])
	hijo1="".join(map(str, hijo1))
	hijo2="".join(map(str, hijo2))

	return [hijo1,hijo2]



def padres(nroCross,nroMut,pad1,pad2):
	hijosCross=[]
	hijosMut=[]
	if(nroCross<0.75):
		nroCorte=random.randint(0,28)
		hijosCross.extend(crossover(nroCorte,pad1,pad2))
		pad1=hijosCross[0]
		pad2=hijosCross[1]
		print("Padres despues de crossover: ")
		print(pad1)
		print(pad2)
	if(nroMut>0.05):
		posMutacion=random.randint(0,29)
		hijosMut.extend(mutacion(posMutacion,pad1,pad2))
		pad1=hijosMut[0]
		pad2=hijosMut[1]

	return [pad1,pad2]





n = 10
poblacion = arreglo(n, 30)
print("Primera poblacion: ")
print (poblacion)


for j in range(10):
	poblacionEnteros=pasaje(poblacion)
	print("Primera poblacion pasada a enteros: ")
	print(poblacionEnteros)
	funObj=funcionobjetivo(poblacionEnteros)
	print("Funcion obejtivo: ")
	print(funObj)
	fit = fitness(funObj)
	print("Funcion fitness: ")
	print (fit)
	ruleta=crearuleta(fit)
	print("Ruleta: ")
	print(ruleta)




	nuevaPoblacion=[]

	for i in range(5):
		nro1=random.choice(ruleta)
		nro2=random.choice(ruleta)

		print("nro 1 de ruleta :"+str(nro1)+" nro2 de ruleta: "+str(nro2))

		nroCross=random.random()
		print("Numero crossover: ")
		print(nroCross)
		nroMut=random.random()
		print("Numero mutacion: ")
		print(nroMut)
		print("Padre 1 y Padre 2: ")
		print(poblacion[nro1],poblacion[nro2])
		nuevaPoblacion.extend(padres(nroCross,nroMut,poblacion[nro1],poblacion[nro2]))
		
	
	print("Nueva poblacion: ")	
	print(nuevaPoblacion)
	poblacion=nuevaPoblacion


print("Poblacion final: ")
print(poblacion)






'''
for i in range(5):
		nro1=random.choice(ruleta)
		nro2=random.choice(ruleta)

		print("nro 1 de ruleta :"+str(nro1)+" nro2 de ruleta: "+str(nro2))
		if(len(nuevaPoblacion) == 0):
			nuevaPoblacion.extend([poblacion[nro1],poblacion[nro2]])
			continue

		nroCross=random.random()
		print("Numero crossover: ")
		print(nroCross)
		nroMut=random.random()
		print("Numero mutacion: ")
		
		
		
		'''
